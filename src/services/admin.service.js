const Order = require("../models/order.model");
const User = require("../models/user.model");
const Series = require("../models/series.model");
const OrderItem = require("../models/orderItem.model");

// T·ªïng quan trong th√°ng
const getOverview = async (startDate, endDate) => {
  // T·ªïng doanh thu, s·ªë l∆∞·ª£ng ƒë∆°n h√†ng, s·ªë l∆∞·ª£ng box b√°n ra, kh√°ch h√†ng m·ªõi
  const totalRevenue = await Order.aggregate([
    {
      $match: { createdAt: { $gte: startDate, $lt: endDate }, status: "done" },
    },
    {
      $group: { _id: null, revenue: { $sum: "$totalPrice" } },
    },
  ]);

  const totalOrders = await Order.countDocuments({
    createdAt: { $gte: startDate, $lt: endDate },
  });

  const totalBoxesSold = await Order.aggregate([
    {
      $match: { createdAt: { $gte: startDate, $lt: endDate }, status: "done" },
    },
    { $unwind: "$orderItems" },
    {
      $group: { _id: null, boxesSold: { $sum: 1 } },
    },
  ]);

  const newCustomers = await User.countDocuments({
    createdAt: { $gte: startDate, $lt: endDate },
  });

  return {
    totalRevenue: totalRevenue[0]?.revenue || 0,
    totalBoxesSold: totalBoxesSold[0]?.boxesSold || 0,
    totalOrders,
    newCustomers,
  };
};

// Doanh thu theo nƒÉm
const getYearlyRevenue = async (startDate, endDate) => {
  const revenueByMonth = await Order.aggregate([
    {
      $match: { createdAt: { $gte: startDate, $lt: endDate }, status: "done" },
    },
    {
      $group: {
        _id: { $month: "$createdAt" },
        revenue: { $sum: "$totalPrice" },
      },
    },
    { $sort: { _id: 1 } },
  ]);

  // Chuy·ªÉn d·ªØ li·ªáu v·ªÅ d·∫°ng d·ªÖ ƒë·ªçc
  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];
  let monthlyRevenue = {};
  months.forEach((m, index) => {
    monthlyRevenue[m] =
      revenueByMonth.find((r) => r._id === index + 1)?.revenue || 0;
  });

  return {
    year,
    monthlyRevenue,
  };
};

// Top series b√°n ch·∫°y
const getTopSellingSeries = async () => {
  try {
    // üîπ B∆∞·ªõc 1: L·ªçc ch·ªâ c√°c OrderItems thu·ªôc Order c√≥ `paymentStatus: "paid"`
    const paidOrderItems = await OrderItem.aggregate([
      {
        $lookup: {
          from: "orders", // Li√™n k·∫øt v·ªõi b·∫£ng Orders
          localField: "_id",
          foreignField: "orderItems",
          as: "orderInfo",
        },
      },
      {
        $match: { "orderInfo.status": "done" }, // Ch·ªâ l·∫•y ƒë∆°n ƒë√£ thanh to√°n
      },
    ]);

    if (!paidOrderItems.length) {
      return []; // N·∫øu kh√¥ng c√≥ ƒë∆°n h√†ng n√†o, tr·∫£ v·ªÅ m·∫£ng r·ªóng
    }

    // üîπ B∆∞·ªõc 2: T√≠nh t·ªïng s·ªë l∆∞·ª£ng ƒë√£ b√°n c·ªßa t·∫•t c·∫£ series
    const totalSoldAll = await OrderItem.aggregate([
      {
        $lookup: {
          from: "orders",
          localField: "_id",
          foreignField: "orderItems",
          as: "orderInfo",
        },
      },
      {
        $match: { "orderInfo.status": "done" }, // Ch·ªâ t√≠nh ƒë∆°n ƒë√£ thanh to√°n
      },
      {
        $group: {
          _id: null, // Gom t·∫•t c·∫£ v√†o m·ªôt nh√≥m duy nh·∫•t
          totalSoldAll: { $sum: "$quantity" }, // T√≠nh t·ªïng s·ªë l∆∞·ª£ng ƒë√£ b√°n c·ªßa t·∫•t c·∫£ series
        },
      },
    ]);

    const totalSoldValue = totalSoldAll.length
      ? totalSoldAll[0].totalSoldAll
      : 1; // Tr√°nh chia 0

    // üîπ B∆∞·ªõc 3: Nh√≥m theo `productId` ƒë·ªÉ t√≠nh t·ªïng s·ªë l∆∞·ª£ng b√°n c·ªßa t·ª´ng series
    const topSellingSeries = await OrderItem.aggregate([
      {
        $lookup: {
          from: "orders",
          localField: "_id",
          foreignField: "orderItems",
          as: "orderInfo",
        },
      },
      {
        $match: { "orderInfo.status": "done" }, // Ch·ªâ l·∫•y ƒë∆°n ƒë√£ thanh to√°n
      },
      {
        $group: {
          _id: "$productId", // Nh√≥m theo ID c·ªßa series
          totalSold: { $sum: "$quantity" }, // T√≠nh t·ªïng s·ªë l∆∞·ª£ng ƒë√£ b√°n
        },
      },
      {
        $sort: { totalSold: -1 }, // S·∫Øp x·∫øp theo t·ªïng s·ªë l∆∞·ª£ng b√°n gi·∫£m d·∫ßn
      },
      {
        $limit: 5, // Ch·ªâ l·∫•y top 5 series
      },
      {
        $lookup: {
          from: "Series", // L·∫•y th√¥ng tin series t·ª´ collection Series
          localField: "_id",
          foreignField: "_id",
          as: "seriesInfo",
        },
      },
      {
        $unwind: "$seriesInfo", // Gi·∫£i n√©n m·∫£ng seriesInfo
      },
      {
        $project: {
          _id: 1, // ID c·ªßa series
          seriesName: "$seriesInfo.name", // T√™n series
          totalSold: 1, // S·ªë l∆∞·ª£ng ƒë√£ b√°n
          popularity: { $divide: ["$totalSold", totalSoldValue] }, // T√≠nh ƒë·ªô ph·ªï bi·∫øn
        },
      },
    ]);

    return topSellingSeries;
  } catch (error) {
    throw error;
  }
};

module.exports = { getOverview, getYearlyRevenue, getTopSellingSeries };
